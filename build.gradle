// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply plugin: 'com.google.gms.google-services'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.1.0-rc1'
        //classpath 'com.android.tools.build:gradle:1.2.3'
        classpath 'com.google.gms:google-services:1.3.0-beta1'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }

}

allprojects {
    repositories {
        jcenter()
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
        def javaCompileTasks = tasks.withType(JavaCompile).collect()
        javaCompileTasks.each {
            task ->
            task.doFirst {
                println 'doFirst'
                classpath.each {
                    path -> println path
                }
                println source
            }
            def newTaskName = task.name + 'Maybe'
            // newTaskName = task.name
            println 'generate new task: ' + newTaskName
            println task.includes
            println task.excludes
            def options = task.getOptions()
            def destinationDir = task.destinationDir
            def tempDir = new File(destinationDir.toString() + 'maybe')
            tasks.create(name: newTaskName, type: JavaExec) {
                // setup input and output to take advantage of UP-TO-DATE
                inputs.file task.source
                outputs.dir tempDir

                doFirst {
                    println 'MaybeJavaC'
                    def arguments = ['-g', '-c', '-D', tempDir]
                    arguments.addAll(['-noserial', '-postcompiler', 'javac'])

                    if (options.bootClasspath != null) {
                        arguments.addAll(['-bootclasspath', options.bootClasspath])
                    }
                    // TODO: polyglot doesn't support -Xlint
                    // arguments.addAll(options.compilerArgs)

                    // if (options.encoding != null) {
                    //     // TODO: polyglot doesn't support -encoding
                    //     arguments.addAll(['-encoding', options.encoding])
                    // }

                    println 'source start'
                    task.source.each {
                        file -> arguments.add(file)
                        println file
                    }
                    println 'source end'
                    // task.source = fileTree(dir: tempDir)

                    task.classpath.each {
                        path -> arguments.addAll(['-classpath', path])
                        println path
                    }

                    args arguments
                }

                // TODO: use maven to get maybe libs
                classpath fileTree(dir: 'libs-maybe', include: '*.jar')

                main = 'edu.buffalo.cse.blue.maybe.Main'

                // enabled = task.enabled

                dependsOn task.dependsOn.collect()

                // task.dependsOn.each {
                //     println it
                // }
                // println commandLine
            }
            task.dependsOn { newTaskName }
            task.doFirst {
                task.source = fileTree(dir: task.destinationDir.toString() + 'maybe')
            }
            // task.enabled = false
        }
    }
}
